Magesh Kuppan

Schedule
    commence    : 9:30 AM
    Tea break   : 11:00 AM (20 mins)
    Lunch break : 1:00 PM (1 hour)
    Tea break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

About You
    Name
    Experience
    Primary Skillset
    Experience in Golang (if any)
    Any interesting shows you watched / books you read recently?

Methodology
    No powerpoints
    Minimum 50% of the participants are expected to complete the assignment

Software Requirement
    Go tools (https://go.dev/dl/)
    Visual Studio Code (https://code.visualstudio.com/download) OR goland

    Ctrl + Shift + P
    OR
    CMD + Shift + P

    Go: install/update tools
    Select all the tools and install them


Why Golang?

    1. Performance
    2. Deployment Efficiency
    3. GRPC adoption is easy
    4. Kubernetes

    1. Simplicity
        25 keywords
        - No access modifiers
        - No classes (only structs)
        - No inheritance (only composition)
        - No exceptions (only error handling)
        - No reference types (everything is a value type)
        - No pointer arithmatic
        - No implicit type conversions

    2. Light Weight
        - compiles to native code
        - no need for any app servers (e.g. Tomcat, Weblogic, etc)
        - performance is equivalent to C++

    3. Built for concurrency programming
        - concurrency?
            Ability to have more than one execution path at a time
        - 2 MB of RAM is needed for an OS thread vs. 4 KB of RAM is needed for a 'goroutine'
        - A concurrent operation in golang = a goroutine
        - Concurrency features are built in the language itself (NO APIs)
            Language featues - go, channel (data type), <- (channel operator), range, select 
            SDK APIs - 'sync' package, 'atomic' package, 'runtime' package


    Paradox of Choice (Barry Schwartz)
    

    To run a go program
        go run <program_name.go>

    To create a build
        go build <program_name.go>
        go build -o <binary_name> <program_name>.go

        ./<program_name>
        OR
        <program_name>.exe

    To create a build for other platforms
    for ex: windows
    
        GOOS=windows GOARCH=386 go build <filename.go>
        GOOS=windows GOARCH=386 go build -o <build_filename> <filename.go>

    The list of other platform configurations can be found at :
        https://go.dev/doc/install/source#environment

    To change the default environment variables
        go env -w GOOS=linux GOARCH=amd64
        go build -o <build_filename> <filename.go>


Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)

programming constructs
    if else
    switch case
    for loop


Assignment:03
    Refactor the solution for assingment:02 using functions

Functions
    Higher Order Functions
        Anonymous functions
        Functions can be treated as data
            - Functions can be assigned as values to variables
            - Functions can be passed as arguments to other functions
            - Functions can be returned by other functions
    Variadic functions

Collections
    Array
        Fixed size collection of data of the same type

    Slice
        Varying size collection of data of the same type
        A pointer to an underlying array

    Map
        Key-value pair collection
        Use the make function to create a map
        

Modularity
    Modules & packages
    Module
        A collection of related code which has to be versioned together and distributed together
        A folder that has the go.mod file
            module name
            target go version

        To create a module
            go mod init <module_name> (advisable => module_name reflects the respository path)

        To run a module
            go run .

        To build a module
            go build .

    Package


    Before Go 1.13
        $GOPATH
            pkg
            bin
            src
                github.com
                    tkmagesh
                        myapp
                            import github.com/tkmagesh/myutils

                        myutils
    
    Using Open Source packages

        installing
            go get <package_name>

        updating go.mod files (based on the usage of the packages)
            go mod tidy

        to localize the dependencies of the application
            go mod vendor

        Other mod commands
            go mod graph
            go mod why

        Module command reference
            https://go.dev/ref/mod


Concurrency
    1. Never assume the sequence of execution of the goroutines
    2. Never assume the time taken for a goroutine to complete

    To detect race conditions
        go run -race <program_name.go>

    Channel Behavior
        1. A 'receive' is ALWAYS a blocking operation
            data := <- ch
        2. A 'send' operation is blocked until a 'receive' operation is initiated (conditions apply)
            OR in other words, a 'send' will be successful only if a 'receive' is already initiated


IO
    io package
        Reader interface
        Writer interface
        Seeker interface
        Closer interface

    os package
        APIs for file manipulation
            creating, opening & deleting files

    ioutil package
        APIs for file reading & writing

    bufio package
        APIs for buffered I/O

    JSON data
        encoding/json package
            Encoder
                NewEncoder(w io.Writer) Encoder

            Decoder
                NewDecoder(r io.Reader) Decoder


    Http Services
        net/http
        3rd routing
        frameworks


Awesome
    https://github.com/avelino/awesome-go

